// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ---------- Enums ----------
enum Location {
  COLLEGE_WEST
  LESLIEVILLE
}

enum Role {
  FRONT_DESK
  FACILITATOR
  CLEANER
}

enum MonthStatus {
  DRAFT
  FINAL
}

/// ---------- Core Auth Models (NextAuth) ----------
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  emailVerified  DateTime?              // required by NextAuth adapter
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Profile
  location       Location  @default(COLLEGE_WEST)

  // NOTE: SQLite + Prisma doesn't allow JSON defaults.
  // Keep this as Json? and default to [] in application code.
  rolesJson      Json?

  // Relations
  accounts       Account[]
  sessions       Session[]
  availabilities Availability[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  // For SQLite, remove @db.Text native type annotations
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

/// ---------- Scheduling Models ----------
model Block {
  id        String   @id @default(cuid())
  day       Int      // 1..7 (Mon..Sun)
  startMin  Int
  endMin    Int
  label     String?
  locked    Boolean  @default(false)
  isClass   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availabilities Availability[]

  @@index([day, startMin])
  @@map("Block")
}

model Month {
  id        String      @id @default(cuid())
  year      Int
  month     Int         // 1..12
  status    MonthStatus @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  availabilities Availability[]

  @@unique([year, month])
  @@map("Month")
}

model Availability {
  id         String   @id @default(cuid())
  userId     String
  monthId    String
  blockId    String
  everyWeek  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  month Month @relation(fields: [monthId], references: [id], onDelete: Cascade)
  block Block @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@unique([userId, monthId, blockId])
  @@index([monthId])
  @@index([blockId])
  @@map("Availability")
}