generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ---------- Enums ----------
enum Location {
  COLLEGE_WEST
  LESLIEVILLE
}

enum Role {
  FRONT_DESK
  FACILITATOR
  CLEANER
}

enum MonthStatus {
  DRAFT
  FINAL
}

/// ---------- Core Auth Models (NextAuth) ----------
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile
  location  Location @default(COLLEGE_WEST)
  rolesJson Json     @default("[]") // JSON default for SQLite (empty array)

  // Relations
  accounts          Account[]
  sessions          Session[]
  availabilities    Availability[]
  dayAvailabilities DayAvailability[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // remove @db.Text for SQLite
  access_token      String? // remove @db.Text for SQLite
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // remove @db.Text for SQLite
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

/// ---------- Scheduling Models ----------

/// (Legacy weekly template â€“ kept in case you still use it elsewhere)
model Block {
  id       String  @id @default(cuid())
  day      Int // 1..7
  startMin Int
  endMin   Int
  label    String?
  locked   Boolean @default(false)
  isClass  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availabilities Availability[]

  @@index([day, startMin])
  @@map("Block")
}

model Month {
  id        String      @id @default(cuid())
  year      Int
  month     Int
  status    MonthStatus @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  availabilities Availability[]
  datedBlocks    DatedBlock[]

  @@unique([year, month])
  @@map("Month")
}

/// Date-specific block (only render what exists in CSV-derived rows)
model DatedBlock {
  id       String  @id @default(cuid())
  monthId  String
  dateISO  String // YYYY-MM-DD
  startMin Int
  endMin   Int
  label    String?
  isClass  Boolean @default(false)
  locked   Boolean @default(false)

  month             Month             @relation(fields: [monthId], references: [id], onDelete: Cascade)
  dayAvailabilities DayAvailability[]

  @@index([monthId, dateISO, startMin])
  @@map("DatedBlock")
}

/// Legacy monthly availability (kept for compatibility)
model Availability {
  id        String   @id @default(cuid())
  userId    String
  monthId   String
  blockId   String
  everyWeek Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  month Month @relation(fields: [monthId], references: [id], onDelete: Cascade)
  block Block @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@unique([userId, monthId, blockId])
  @@index([monthId])
  @@index([blockId])
  @@map("Availability")
}

/// Per-date availability tied to DatedBlock
model DayAvailability {
  id           String   @id @default(cuid())
  userId       String
  datedBlockId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  datedBlock DatedBlock @relation(fields: [datedBlockId], references: [id], onDelete: Cascade)

  @@unique([userId, datedBlockId]) // prevents duplicates
  @@index([datedBlockId])
  @@map("DayAvailability")
}
