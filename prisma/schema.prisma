// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ---------- Enums ----------
enum Location {
  COLLEGE_WEST
  LESLIEVILLE
}

enum Role {
  FRONT_DESK
  FACILITATOR
  CLEANER
}

enum MonthStatus {
  DRAFT
  FINAL
}

/// ---------- Core Auth Models (NextAuth) ----------
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile
  location  Location @default(COLLEGE_WEST) // single for now (extensible later)
  rolesJson Json     @default("[]") // array of Role strings, e.g. ["FACILITATOR","FRONT_DESK"]

  // Relations
  accounts       Account[]
  sessions       Session[]
  availabilities Availability[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

/// ---------- Scheduling Models ----------
/// Weekly template block (recurs each week on `day`)
model Block {
  id       String  @id @default(cuid())
  day      Int // 1=Mon … 7=Sun
  startMin Int // minutes from 00:00
  endMin   Int // minutes from 00:00
  label    String?
  locked   Boolean @default(false)
  isClass  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availabilities Availability[]

  @@index([day, startMin])
  @@map("Block")
}

/// Scheduling month (e.g., 2025 / 10)
model Month {
  id        String      @id @default(cuid())
  year      Int
  month     Int // 1..12
  status    MonthStatus @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  availabilities Availability[]

  @@unique([year, month])
  @@map("Month")
}

/// User availability per (Month x Block)
/// If `everyWeek` is true, it means “available for this block each week in this month”.
model Availability {
  id        String   @id @default(cuid())
  userId    String
  monthId   String
  blockId   String
  everyWeek Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  month Month @relation(fields: [monthId], references: [id], onDelete: Cascade)
  block Block @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@unique([userId, monthId, blockId])
  @@index([monthId])
  @@index([blockId])
  @@map("Availability")
}
