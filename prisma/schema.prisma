// prisma/schema.prisma
// Adds Week.lockAt, default(now()) on updatedAt, and Assignment model for manager shift assignments.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Phase 1: local SQLite; can swap later
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------

enum Role {
  STAFF
  MANAGER
}

enum TimeBlock {
  MORNING
  AFTERNOON
  EVENING
}

enum ShiftRole {
  FRONT_DESK
  FACILITATOR
}

// ---------- Models ----------

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  role  Role    @default(STAFF)

  availabilities Availability[]
  assignments    Assignment[]   @relation("AssignmentUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Week {
  id String @id @default(cuid())

  /// Start of the scheduling week (Monday at 00:00 local). Unique per week.
  startMonday DateTime @unique

  /// When edits become locked for staff. Null = unlocked.
  lockAt DateTime?

  availabilities Availability[]
  assignments    Assignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Availability {
  id String @id @default(cuid())

  userId String
  weekId String

  /// Which time block in the day this record represents.
  blockId TimeBlock

  /// 0..6 for Mon..Sun
  dayIndex Int

  /// Whether the user is available for this cell.
  available Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  week Week @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@unique([userId, weekId, blockId, dayIndex])
  @@index([weekId])
  @@index([userId])
}

model Assignment {
  id String @id @default(cuid())

  weekId   String
  dayIndex Int // 0..6 Mon..Sun
  blockId  TimeBlock
  role     ShiftRole // FRONT_DESK / FACILITATOR

  assignedUserId String? // null if unfilled
  assignedUser   User?   @relation("AssignmentUser", fields: [assignedUserId], references: [id], onDelete: SetNull)
  week           Week    @relation(fields: [weekId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([weekId, dayIndex, blockId, role])
  @@index([weekId])
  @@index([assignedUserId])
}
